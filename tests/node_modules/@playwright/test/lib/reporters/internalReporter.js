"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InternalReporter = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _utilsBundle = require("playwright-core/lib/utilsBundle");
var _babelBundle = require("../transform/babelBundle");
var _test = require("../common/test");
var _multiplexer = require("./multiplexer");
var _base = require("./base");
var _utils = require("playwright-core/lib/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class InternalReporter {
  constructor(reporters) {
    this._multiplexer = void 0;
    this._deferred = [];
    this._config = void 0;
    this._montonicStartTime = 0;
    this._multiplexer = new _multiplexer.Multiplexer(reporters);
  }
  onConfigure(config) {
    this._config = config;
  }
  onBegin(config, suite) {
    this._montonicStartTime = (0, _utils.monotonicTime)();
    this._multiplexer.onBegin(config, suite);
    const deferred = this._deferred;
    this._deferred = null;
    for (const item of deferred) {
      if (item.error) this.onError(item.error);
      if (item.stdout) this.onStdOut(item.stdout.chunk, item.stdout.test, item.stdout.result);
      if (item.stderr) this.onStdErr(item.stderr.chunk, item.stderr.test, item.stderr.result);
    }
  }
  onTestBegin(test, result) {
    this._multiplexer.onTestBegin(test, result);
  }
  onStdOut(chunk, test, result) {
    if (this._deferred) {
      this._deferred.push({
        stdout: {
          chunk,
          test,
          result
        }
      });
      return;
    }
    this._multiplexer.onStdOut(chunk, test, result);
  }
  onStdErr(chunk, test, result) {
    if (this._deferred) {
      this._deferred.push({
        stderr: {
          chunk,
          test,
          result
        }
      });
      return;
    }
    this._multiplexer.onStdErr(chunk, test, result);
  }
  onTestEnd(test, result) {
    this._addSnippetToTestErrors(test, result);
    this._multiplexer.onTestEnd(test, result);
  }
  async onEnd() {
    this._config.config.metadata.totalTime = (0, _utils.monotonicTime)() - this._montonicStartTime;
  }
  async onExit(result) {
    if (this._deferred) {
      // onBegin was not reported, emit it.
      this.onBegin(this._config.config, new _test.Suite('', 'root'));
    }
    await this._multiplexer.onEnd(result);
    await this._multiplexer.onExit();
  }
  onError(error) {
    if (this._deferred) {
      this._deferred.push({
        error
      });
      return;
    }
    addLocationAndSnippetToError(this._config.config, error);
    this._multiplexer.onError(error);
  }
  onStepBegin(test, result, step) {
    this._multiplexer.onStepBegin(test, result, step);
  }
  onStepEnd(test, result, step) {
    this._addSnippetToStepError(test, step);
    this._multiplexer.onStepEnd(test, result, step);
  }
  _addSnippetToTestErrors(test, result) {
    for (const error of result.errors) addLocationAndSnippetToError(this._config.config, error, test.location.file);
  }
  _addSnippetToStepError(test, step) {
    if (step.error) addLocationAndSnippetToError(this._config.config, step.error, test.location.file);
  }
}
exports.InternalReporter = InternalReporter;
function addLocationAndSnippetToError(config, error, file) {
  if (error.stack && !error.location) error.location = (0, _base.prepareErrorStack)(error.stack).location;
  const location = error.location;
  if (!location) return;
  try {
    const tokens = [];
    const source = _fs.default.readFileSync(location.file, 'utf8');
    const codeFrame = (0, _babelBundle.codeFrameColumns)(source, {
      start: location
    }, {
      highlightCode: true
    });
    // Convert /var/folders to /private/var/folders on Mac.
    if (!file || _fs.default.realpathSync(file) !== location.file) {
      tokens.push(_utilsBundle.colors.gray(`   at `) + `${(0, _base.relativeFilePath)(config, location.file)}:${location.line}`);
      tokens.push('');
    }
    tokens.push(codeFrame);
    error.snippet = tokens.join('\n');
  } catch (e) {
    // Failed to read the source file - that's ok.
  }
}