"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobReporter = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _utils = require("playwright-core/lib/utils");
var _utilsBundle = require("playwright-core/lib/utilsBundle");
var _stream = require("stream");
var _teleEmitter = require("./teleEmitter");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class BlobReporter extends _teleEmitter.TeleReporterEmitter {
  constructor(options) {
    super(message => this._messages.push(message));
    this._messages = [];
    this._options = void 0;
    this._salt = void 0;
    this._copyFilePromises = new Set();
    this._outputDir = void 0;
    this._reportFile = void 0;
    this._options = options;
    this._salt = (0, _utils.createGuid)();
    this._messages.push({
      method: 'onBlobReportMetadata',
      params: {
        projectSuffix: process.env.PWTEST_BLOB_SUFFIX
      }
    });
  }
  printsToStdio() {
    return false;
  }
  onBegin(config, suite) {
    this._outputDir = _path.default.resolve(this._options.configDir, this._options.outputDir || 'blob-report');
    _fs.default.mkdirSync(_path.default.join(this._outputDir, 'resources'), {
      recursive: true
    });
    this._reportFile = this._computeOutputFileName(config);
    super.onBegin(config, suite);
  }
  async onEnd(result) {
    await super.onEnd(result);
    const lines = this._messages.map(m => JSON.stringify(m) + '\n');
    const content = _stream.Readable.from(lines);
    await Promise.all([...this._copyFilePromises,
    // Requires Node v14.18.0+
    _fs.default.promises.writeFile(this._reportFile, content).catch(e => console.error(`Failed to write report ${this._reportFile}: ${e}`))]);
  }
  _serializeAttachments(attachments) {
    return attachments.map(attachment => {
      if (!attachment.path || !_fs.default.statSync(attachment.path).isFile()) return attachment;
      // Add run guid to avoid clashes between shards.
      const sha1 = (0, _utils.calculateSha1)(attachment.path + this._salt);
      const extension = _utilsBundle.mime.getExtension(attachment.contentType) || 'dat';
      const newPath = `resources/${sha1}.${extension}`;
      this._startCopyingFile(attachment.path, _path.default.join(this._outputDir, newPath));
      return {
        ...attachment,
        path: newPath
      };
    });
  }
  _computeOutputFileName(config) {
    let shardSuffix = '';
    if (config.shard) {
      const paddedNumber = `${config.shard.current}`.padStart(`${config.shard.total}`.length, '0');
      shardSuffix = `${paddedNumber}-of-${config.shard.total}-`;
    }
    return _path.default.join(this._outputDir, `report-${shardSuffix}${(0, _utils.createGuid)()}.jsonl`);
  }
  _startCopyingFile(from, to) {
    const copyPromise = _fs.default.promises.copyFile(from, to).catch(e => {
      console.error(`Failed to copy file from "${from}" to "${to}": ${e}`);
    }).then(() => {
      this._copyFilePromises.delete(copyPromise);
    });
    this._copyFilePromises.add(copyPromise);
  }
}
exports.BlobReporter = BlobReporter;